import telebot
from telebot import types
import requests
import json
import os

# –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞ –æ—Ç BotFather
BOT_TOKEN = "7285681448:AAF0chLLhp4k0uCJbaYn_-yO09wSY1wY-aw"
# –¢–≤–æ–π –∫–ª—é—á –æ—Ç OpenRouter
OPENROUTER_API_KEY = "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"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(chat_id):
    user_data = users_data.get(chat_id, {"calories": 0, "water": 0})
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–Ø —Å—ä–µ–ª —á—Ç–æ-—Ç–æ üçΩÔ∏è")
    btn2 = types.KeyboardButton("–ü–æ–ø–∏–ª –≤–æ–¥—ã üíß")
    markup.add(btn1, btn2)
    
    calories = user_data["calories"]
    water = user_data["water"]
    bot.send_message(chat_id, 
                    f"–¢–≤–æ–∏ –∫–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n"
                    f"–í—ã–ø–∏—Ç–æ –≤–æ–¥—ã: {water} –º–ª / 2000 –º–ª",
                    reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    if chat_id not in users_data:
        users_data[chat_id] = {"calories": 0, "water": 0}
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∏ –≤–æ–¥—É üòä")
    main_menu(chat_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    if chat_id not in users_data:
        users_data[chat_id] = {"calories": 0, "water": 0}
    
    if message.text == "–Ø —Å—ä–µ–ª —á—Ç–æ-—Ç–æ üçΩÔ∏è":
        bot.send_message(chat_id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã —Å—ä–µ–ª!")
    elif message.text == "–ü–æ–ø–∏–ª –≤–æ–¥—ã üíß":
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –º–ª –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª?")
    else:
        main_menu(chat_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
    
    # –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
    response = requests.post(
        url="https://openrouter.ai/api/v1/chat/completions",
        headers={
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "http://localhost",
            "X-Title": "CalorieCounterBot"
        },
        data=json.dumps({
            "model": "google/gemini-2.5-pro-exp-03-25:free",
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "–ü—Ä–∏–≤–µ—Ç, —Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–æ—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏. –í–æ—Ç —Ñ–æ—Ç–æ, —á—Ç–æ —Å—ä–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –û–ø–∏—à–∏, —á—Ç–æ —ç—Ç–æ, —á–µ–º –æ–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –∏ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ –Ω—ë–º –∫–∞–ª–æ—Ä–∏–π. –ë–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞."
                        },
                        {
                            "type": "image_url",
                            "image_url": {"url": file_url}
                        }
                    ]
                }
            ]
        })
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    if response.status_code == 200:
        result = response.json()
        answer = result["choices"][0]["message"]["content"]
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–ª–æ—Ä–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —á–∏—Å–ª–æ –∫–∞–ª–æ—Ä–∏–π)
        try:
            calories = int(''.join(filter(str.isdigit, answer.split("–∫–∞–ª–æ—Ä–∏–π")[0].split()[-1])))
            users_data[chat_id]["calories"] += calories
        except:
            calories = 0
        
        bot.send_message(chat_id, answer)
        main_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–¥—ã
@bot.message_handler(content_types=['text'], regexp=r'^\d+$')
def handle_water(message):
    chat_id = message.chat.id
    water_ml = int(message.text)
    users_data[chat_id]["water"] += water_ml
    
    water_total = users_data[chat_id]["water"]
    bot.send_message(chat_id, f"–ó–∞–ø–∏—Å–∞–ª! –¢—ã –≤—ã–ø–∏–ª {water_ml} –º–ª. –í—Å–µ–≥–æ: {water_total}/2000 –º–ª üíß")
    if water_total >= 2000:
        bot.send_message(chat_id, "–£—Ä–∞! –¶–µ–ª—å –Ω–∞ –¥–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ üéâ")
    main_menu(chat_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)